name: 'Check compliance of tfplan with OPA'
 
on:
  workflow_dispatch:
  #  branches:
   # - main
  pull_request:
env:
  OPA_VERSION: v0.49.0
  #MAIN_TF: terraform/main.tf
  TF_FILE: tfplan.json
  TF_FILE_PATH: ./terraform
  REGO_PATH: OPA/Rules/CountVMName.rego
  OUTPUT_PATH: VM_TBCEP.json
 
permissions:
      id-token: write
      contents: read

jobs:
  Terraform:
    name: "Run terraform" 
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:

    - name: "[+] Checkout code"
      uses: actions/checkout@v2

    - name: "[+] Install AZ Cli"
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: "[+] Run AZ login "
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

    - name: "[+] Check AZ Login"
      run: |
        az account show

    - name: "[+] Terraform init"
      run: |
        echo "Terraform init"
        terraform init 

    - name: "[+] Terraform plan"
      run: |
        echo "Terraform plan to .library"
        terraform plan --out tfplan.binary
        ls 
        echo "Terraform .library to .json"
        terraform show -json tfplan.binary > tfplan.json
        ls

    - name: "[+] Upload a single artifact"
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.TF_FILE }}
        path: ${{ env. TF_FILE_PATH }} 

  OPA:
    needs: Terraform
    name: "Check VM name with OPA rules"
    runs-on: ubuntu-latest

    steps:

    - name: "[+] Checkout code"
      uses: actions/checkout@v2

    - name: "[+] Install OPA"
      run: |
        sudo apt-get update
        sudo apt-get install wget jq -y
        wget https://github.com/open-policy-agent/opa/releases/download/$OPA_VERSION/opa_linux_amd64
        sudo mv opa_linux_amd64 /usr/local/bin/opa
        sudo chmod 755 /usr/local/bin/opa

    - name: 'Upload Artifact'
      uses: actions/download-artifact@v3
      with:
       name: ${{ env.TF_FILE_PATH }}
       path: terraform/${{ env.TF_FILE_PATH }}
       retention-days: 1 

    - name: "[+] Check VM name with OPA rules"
      run: |
        opa eval -i $TF_FILE_PATH -d $REGO_PATH "data.main.deny" -f pretty > $OUTPUT_PATH
        echo "List files in directory"
        ls
        echo "Display content of $OUTPUT_PATH"
        cat $OUTPUT_PATH

    - name: "[+] Show result.json"
      run: cat $OUTPUT_PATH

    - name: "[+] Exit 1 if error "
      run: |
        #[+] Exit 1 if error
        if  [[ -z $(cat $OUTPUT_PATH | jq '.[]') ]]; then
            exit 0
        else
            exit 1
        fi

  VM:
    name: "Create VM in Azure"
    needs: OPA
    env:
      ARM_CLIENT_ID: ${{ secrets.FABRYK_AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.FABRYK_AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.FABRYK_AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.FABRYK_AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:

    - name: 'Install Terraform'
      uses: hashicorp/setup-terraform@v1

    - name: "[+] Checkout code"
      uses: actions/checkout@v2

    - name: "[+] Terraform init"
      run: |
        echo "Terraform init"
        terraform init 

    - name: "[+] Terraform plan"
      run: |
        echo "Terraform plan to .library"
        terraform plan 

    - name: "[+] Create VM on Azure"
      run: |
        echo "Create VM on Azure"
        terraform apply -auto-approve

      
